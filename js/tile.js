// Generated by CoffeeScript 1.4.0
var Tile,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tile = (function(_super) {

  __extends(Tile, _super);

  function Tile(row, col, h, w) {
    this.row = row;
    this.col = col;
    this.h = h != null ? h : 25;
    this.w = w != null ? w : 25;
    this.draw = __bind(this.draw, this);

    Tile.__super__.constructor.apply(this, arguments);
    this.x = this.w * this.col;
    this.y = this.h * this.row;
    this.bind();
  }

  Tile.prototype.bind = function() {
    return this.signals.preparedMove.add(this.draw);
  };

  Tile.prototype.draw = function() {
    if (this.visible()) {
      this.ctx.fillStyle = "#" + (Math.floor(Math.random() * 16777215).toString(16));
      return this.ctx.fillRect(this.x, this.y, this.w, this.h);
    }
  };

  Tile.prototype.collision = function(b) {
    this.r = this.x + this.w;
    this.b = this.y + this.h;
    b.r = b.x + b.w;
    b.b = b.y + b.h;
    if (this.b <= b.y) {
      return false;
    }
    if (this.y >= b.b) {
      return false;
    }
    if (this.r <= b.x) {
      return false;
    }
    if (this.x >= b.r) {
      return false;
    }
    return true;
  };

  Tile.prototype.visible = function() {
    return this.collision(this.visibeArea);
  };

  return Tile;

})(Base);
