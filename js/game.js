// Generated by CoffeeScript 1.5.0
var Game,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = (function(_super) {

  __extends(Game, _super);

  Game.prototype.fps = 10;

  function Game(canvasElementId) {
    if (canvasElementId == null) {
      canvasElementId = 'c';
    }
    this.drawDemoSquares = __bind(this.drawDemoSquares, this);
    this.moveDemoSquares = __bind(this.moveDemoSquares, this);
    this.gameLoop = __bind(this.gameLoop, this);
    Game.__super__.constructor.apply(this, arguments);
    Base.prototype.canvas = document.getElementById(canvasElementId);
    this.setWidthAndHeight();
    this.setCanvasVisibleArea();
    this.setCanvasSize();
    Base.prototype.ctx = c.getContext('2d');
    this.createGrid();
    this.createController();
    this.createCity();
    this.gameLoop();
  }

  Game.prototype.bind = function() {};

  Game.prototype.createController = function() {
    return this.controller = new Controller;
  };

  Game.prototype.setWidthAndHeight = function() {
    Base.prototype.screenHeight = window.document.height;
    return Base.prototype.screenWidth = window.document.width;
  };

  Game.prototype.setCanvasVisibleArea = function() {
    return Base.prototype.visibeArea = {
      x: 0,
      y: 0,
      h: this.screenHeight,
      w: this.screenWidth
    };
  };

  Game.prototype.setCanvasSize = function() {
    this.canvas.height = this.visibeArea.h;
    return this.canvas.width = this.visibeArea.w;
  };

  Game.prototype.createGrid = function() {
    return this.grid = new Grid;
  };

  Game.prototype.gameLoop = function() {
    this.signals.preparedDraw.dispatch();
    return this.gLoop = setTimeout(this.gameLoop, 1000 / this.fps);
  };

  Game.prototype.createCity = function() {
    return this.city = new City;
  };

  Game.prototype.createDemoSquares = function() {
    var num, _i, _ref, _results;
    _results = [];
    for (num = _i = _ref = this.numberOfDemoSquares; _ref <= 1 ? _i <= 1 : _i >= 1; num = _ref <= 1 ? ++_i : --_i) {
      _results.push(this.demoSquares.push([Math.floor(Math.random() * this.width), Math.floor(Math.random() * this.height), Math.random() * 100, Math.random() / 2]));
    }
    return _results;
  };

  Game.prototype.moveDemoSquares = function(deltaY) {
    var num, _i, _ref, _results;
    if (deltaY == null) {
      deltaY = 5;
    }
    _results = [];
    for (num = _i = _ref = this.numberOfDemoSquares - 1; _ref <= 0 ? _i <= 0 : _i >= 0; num = _ref <= 0 ? ++_i : --_i) {
      if (this.demoSquares[num][1] - this.demoSquares[num][2] > this.height) {
        this.demoSquares[num][0] = Math.random() * this.width;
        this.demoSquares[num][2] = Math.random() * 100;
        this.demoSquares[num][1] = 0 - this.demoSquares[num][2];
        _results.push(this.demoSquares[num][3] = Math.random() / 2);
      } else {
        _results.push(this.demoSquares[num][1] += deltaY);
      }
    }
    return _results;
  };

  Game.prototype.drawDemoSquares = function() {
    var num, _i, _ref, _results;
    _results = [];
    for (num = _i = _ref = this.numberOfDemoSquares - 1; _ref <= 0 ? _i <= 0 : _i >= 0; num = _ref <= 0 ? ++_i : --_i) {
      this.ctx.fillStyle = "rgba(0, 0, 0, " + this.demoSquares[num][3] + ")";
      this.ctx.beginPath();
      this.ctx.arc(this.demoSquares[num][0], this.demoSquares[num][1], this.demoSquares[num][2], 0, Math.PI * 2, true);
      this.ctx.closePath();
      _results.push(this.ctx.fill());
    }
    return _results;
  };

  return Game;

})(Base);

window.onload = function() {
  var game;
  return game = new Game('c');
};
