// Generated by CoffeeScript 1.5.0
var Grid,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Grid = (function(_super) {

  __extends(Grid, _super);

  Grid.prototype.tiles = [];

  Grid.prototype.level = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]];

  Grid.prototype.types = [Grass, Sand];

  function Grid() {
    this.notifyTile = __bind(this.notifyTile, this);    Grid.__super__.constructor.apply(this, arguments);
    this.drawTiles();
  }

  Grid.prototype.bind = function() {
    return this.signals.mouse.over.add(this.notifyTile);
  };

  Grid.prototype.notifyTile = function(row, col) {
    var _ref;
    return (_ref = this.tiles[col * 10 + row]) != null ? _ref.setHovered(true) : void 0;
  };

  Grid.prototype.drawTiles = function() {
    var c, r, t, tile, tt, _i, _len, _ref, _results;
    _ref = this.level;
    _results = [];
    for (r = _i = 0, _len = _ref.length; _i < _len; r = ++_i) {
      t = _ref[r];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (c = _j = 0, _len1 = t.length; _j < _len1; c = ++_j) {
          tt = t[c];
          tile = new this.types[tt](r, c);
          _results1.push(this.tiles.push(tile));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return Grid;

})(Base);
