// Generated by CoffeeScript 1.5.0
var Controller,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Controller = (function(_super) {

  __extends(Controller, _super);

  function Controller() {
    this.mouseMove = __bind(this.mouseMove, this);    Controller.__super__.constructor.apply(this, arguments);
  }

  Controller.prototype.bind = function() {
    window.onkeyup = this.keyUp;
    window.onkeydown = this.keyDown;
    return this.canvas.addEventListener('mousemove', this.mouseMove);
  };

  Controller.prototype.keyUp = function(e) {
    switch (e.keyCode) {
      case 38:
        return this.signals.keyUp.up.dispatch();
      case 40:
        return this.signals.keyUp.down.dispatch();
      case 37:
        return this.signals.keyUp.left.dispatch();
      case 39:
        return this.signals.keyUp.right.dispatch();
    }
  };

  Controller.prototype.keyDown = function(e) {
    switch (e.keyCode) {
      case 38:
        return this.signals.keyDown.up.dispatch();
      case 40:
        return this.signals.keyDown.down.dispatch();
      case 37:
        return this.signals.keyDown.left.dispatch();
      case 39:
        return this.signals.keyDown.right.dispatch();
    }
  };

  Controller.prototype.mouseMove = function(mouse) {
    var hitX, hitY, tileH, tileW;
    tileW = 50;
    tileH = 25;
    hitX = Math.floor(mouse.x / tileW);
    hitY = Math.floor(mouse.y / tileH);
    return this.signals.mouse.over.dispatch(hitX, hitY);
  };

  return Controller;

})(Base);
